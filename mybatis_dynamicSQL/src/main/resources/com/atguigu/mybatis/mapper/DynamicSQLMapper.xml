<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.mapper.DynamicSQLMapper">

<!--    设置sql片段，当某个sql需要使用时，可以通过include标签引入-->
    <sql id="empColumns">
        emp_id,emp_name,age,gender,dept_id
    </sql>
<!--    动态SQL：
        1. if :通过test属性中的表达式判断标签中的内容是否有效（是否会拼接到SQL中）-->
<!--    List<Emp> getEmpByCondition(Emp emp);-->
    <select id="getEmpByConditionOne" resultType="Emp">
        select <include refid="empColumns"></include> from t_emp where 1=1
        <if test="empName != null and empName != ''">
            and emp_name = #{empName}
        </if>
        <if test="age != null and age != ''">
            and age = #{age}
        </if>
        <if test="gender != null and gender != ''">
            and gender = #{gender}
        </if>
    </select>

<!--    2.通过where标签自动生成：若该标签中有条件成立则会自动生成where关键字。
           且会自动将前面多余的and去掉（但是后面的and不会去掉）。若标签中没有任何一个条件成立，则该标签没有任何功能-->
    <select id="getEmpByConditionTwo" resultType="Emp">
        select * from t_emp
        <where>
            <if test="empName != null and empName != ''">
                and emp_name = #{empName}
            </if>
            <if test="age != null and age != ''">
                and age = #{age}
            </if>
            <if test="gender != null and gender != ''">
                and gender = #{gender}
            </if>
        </where>
    </select>

<!--    3.通过trim标签
        prefix,suffix:在标签内容的前面或后面添加指定的内容
        prefixOverrides,suffixOverrides:在标签内容的前面或后面去掉指定的内容-->
    <select id="getEmpByCondition" resultType="Emp">
        select <include refid="empColumns"></include> from t_emp
        <trim prefix="where" suffixOverrides="and">
            <if test="empName != null and empName != ''">
                 emp_name = #{empName} and
            </if>
            <if test="age != null and age != ''">
                 age = #{age} and
            </if>
            <if test="gender != null and gender != ''">
                 gender = #{gender} and
            </if>
        </trim>
    </select>

<!--    4.choose, when ,otherwise：when可以有多个，otherwise只能有一个（因为它相当于else）
        其中when相当于if else 的结构，意思是只有一个when标签中的内容会生效，因此不需要在内容前或后
        加上and -->
<!--    List<Emp> getEmpByChoose(Emp emp);-->
    <select id="getEmpByChoose" resultType="Emp">
        select * from t_emp
        <where>
            <choose>
                <when test="empName != null and empName != ''">
                    emp_name = #{empName}
                </when>
                <when test="age != null and age != ''">
                    age = #{age}
                </when>
                <when test="gender != null and gender != ''">
                    gender = #{gender}
                </when>
            </choose>
        </where>
    </select>

<!--    void insertMoreEmp(@Param("emps") List<Emp> emps);-->
    <insert id="insertMoreEmp">
        insert into t_emp values
        <foreach collection="emps" item="emp" separator=",">
            (null,#{emp.empName},#{emp.age},#{emp.gender},null)
        </foreach>
    </insert>
<!--
        foreach 标签
        collection: 设置要循环的数组或集合
        item:用一个字符串表示数组或集合中的每一个数据
        separator:每次循环的数据之间的分隔符
        open:循环的内容以什么开始
        close:循环的内容以什么结束 -->
<!--    void deleteMoreEmp(@Param("empIds") Integer[] empIds);-->
    <delete id="deleteMoreEmp">
<!--        delete from t_emp where emp_id in-->
<!--            <foreach collection="empIds" item="empId" separator="," open="(" close=")">-->
<!--                #{empId}-->
<!--            </foreach>-->

            <!-- 使用or-->
            delete from t_emp where
            <foreach collection="empIds" item="empId" separator="or">
                emp_id = #{empId}
            </foreach>
    </delete>
</mapper>